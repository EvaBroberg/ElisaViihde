{"version":3,"sources":["components/channel/channel.component.jsx","components/channel-list/channel-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Channel","props","programs","length","logo","className","src","alt","map","program","name","ChannelList","channelsPrograms","channel","channelsLogos","hasOwnProperty","id","App","state","title","this","getChannelsLogos","setState","getLivePrograms","fetch","response","json","data","schedule","channels","forEach","logos","url","renderChannels","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAIaA,G,YAAU,SAAAC,GACnB,QAAIA,EAAMC,SAASC,SAEXF,EAAMG,KAEN,yBAAKC,UAAU,WACX,yBAAKC,IAAKL,EAAMG,KAAMG,IAAI,SACzBN,EAAMC,SAASM,KAAI,SAAAC,GAAO,OACvB,4BAAKA,EAAQC,UAOrB,yBAAKL,UAAU,WACX,4BAAKJ,EAAMS,MACVT,EAAMC,SAASM,KAAI,SAAAC,GAAO,OACvB,4BAAKA,EAAQC,aClBpBC,G,MAAc,SAAAV,GAI3B,OACI,yBAAKI,UAAU,eAGPJ,EAAMW,iBAAiBJ,KAAK,SAAAK,GACxB,IAAIT,EAAOH,EAAMa,cAAcC,eAAgBF,EAAQA,QAAQG,IAAOf,EAAMa,cAAcD,EAAQA,QAAQG,IAAM,KAEhH,OACI,kBAAC,EAAD,CAASd,SAAUW,EAAQX,SAAUQ,KAAMG,EAAQA,QAAQH,KAAMN,KAAMA,UCkD5Ea,G,kBA5Db,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXJ,cAAe,GACfF,iBAAkB,GAClBO,MAAO,IALG,E,iNAWcC,KAAKC,mB,cAA3BP,E,OACJM,KAAKE,SAAS,CAAER,cAAeA,I,SAENM,KAAKG,kB,8RAKTC,MAAM,0D,cAAvBC,E,gBACaA,EAASC,O,OAAtBC,E,OAEJP,KAAKE,SAAS,CAAEV,iBAAkBe,EAAKC,W,mRAIlBJ,MAAM,qD,cAAvBC,E,gBACaA,EAASC,O,cAAtBC,E,OAEAb,EAAgB,GACpBa,EAAKE,SAASC,SAAQ,SAAAjB,GACpBC,EAAcD,EAAQG,IAAMH,EAAQkB,MAAM,GAAGC,O,kBAExClB,G,wIAQP,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,CAAaO,iBAAkBQ,KAAKF,MAAMN,iBAAkBE,cAAeM,KAAKF,MAAMJ,mB,+BAU1F,OACEM,KAAKF,MAAMN,iBAAiBT,OAASiB,KAAKa,iBAAmB,iB,GAvDjDC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f947dd7.chunk.js","sourcesContent":["import React from 'react';\nimport {CardList} from '../card-list/card-list.component';\n\n\nexport const Channel = props => {\n    if( props.programs.length ) {\n\n       if ( props.logo ) {\n        return ( \n            <div className='channel'>\n                <img src={props.logo} alt=\"logo\"/>\n                {props.programs.map(program => (\n                    <h4>{program.name}</h4>\n                ))}\n            </div>\n            \n            )\n       } else {\n        return ( \n            <div className='channel'>\n                <h3>{props.name}</h3>\n                {props.programs.map(program => (\n                    <h4>{program.name}</h4>\n                ))}\n            </div>\n            \n            )\n       }\n\n           \n\n    } else return false;\n\n};\n\n","import React from 'react';\nimport { Channel } from '../channel/channel.component';\nimport './channel-list.styles.scss';\n\nexport const ChannelList = props => {\n\n    \n\nreturn (\n    <div className='channelList'>\n        \n        {\n            props.channelsPrograms.map( channel => {\n                let logo = props.channelsLogos.hasOwnProperty( channel.channel.id ) ? props.channelsLogos[channel.channel.id] : null;\n\n                return (\n                    <Channel programs={channel.programs} name={channel.channel.name} logo={logo}/>\n                )\n            }\n                \n            )\n            \n        }\n    </div>\n);\n\n    }","import React from 'react';\nimport {ChannelList} from './components/channel-list/channel-list.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      channelsLogos: [],\n      channelsPrograms: [],\n      title: ''\n    };\n  }\n\n  async componentDidMount() {\n    \n    let channelsLogos = await this.getChannelsLogos();\n    this.setState({ channelsLogos: channelsLogos });\n    \n    let liveChannels = await this.getLivePrograms();\n    \n  }\n\n  async getLivePrograms() {\n    let response = await fetch('https://rest-api.elisaviihde.fi/rest/epg/schedule/live')\n    let data = await response.json();\n\n    this.setState({ channelsPrograms: data.schedule });\n  }\n\n  async getChannelsLogos() {\n    let response = await fetch('https://rest-api.elisaviihde.fi/rest/epg/channels')\n    let data = await response.json();\n\n    let channelsLogos = {};\n    data.channels.forEach(channel => {\n      channelsLogos[channel.id] = channel.logos[7].url\n    });\n    return channelsLogos;\n    \n    \n\n  }\n  \n  \n  renderChannels() {\n    return (\n      <div className=\"App\">\n        <ChannelList channelsPrograms={this.state.channelsPrograms} channelsLogos={this.state.channelsLogos}/>\n      </div>\n      \n    );\n  }\n\n\n  render(){\n   \n  \n    return (\n      this.state.channelsPrograms.length ? this.renderChannels() : 'Loading...'\n    )\n\n  }\n}\n\nexport default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}